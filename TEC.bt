//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: 
//   Authors: KillzXGaming
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
struct NameOffset;
struct NameOffset16;
struct ShaderHeader;
struct ShaderData;
struct ShaderProgram;
struct ShaderDefineInfo;
struct ShaderDefine;
struct UnknownSection1;
struct Uniform;

struct Header
{
    ShaderHeader shaderHeader;
    
    local uint pos = FTell();
    
    uint padding;
    uint unkCount;
    uint padding;
    uint padding;
    
    uint unk;
    uint unk;
    uint unk;
    uint unk;
      
    
    FSeek(pos + shaderHeader.unkOffset1);
    UnknownSection1 unks1[(shaderHeader.unkCount1)];
    
    FSeek(pos + shaderHeader.shaderProgramOffset);
    ShaderProgram shaderPrograms[shaderHeader.shaderProgramCount];
    
    FSeek(pos + shaderHeader.indicesOffset);
    uint indices[shaderHeader.indicesCount]; //some indices link to shaders
    
    FSeek(pos + shaderHeader.stringTableOffset);
    byte strings[shaderHeader.stringTableSize];

    FSeek(pos + shaderHeader.unkShaderOffset);
    ulong shaderEmpty[shaderHeader.unkShaderCount];
    
    FSeek(pos + shaderHeader.shaderOffset);
    ShaderData shaderList[shaderHeader.shaderCount]<optimize=false>;

    FSeek(pos + shaderHeader.samplerNameOffset);
    NameOffset16 samplerNames[shaderHeader.samplerCount]<optimize=false>;

    FSeek(pos + shaderHeader.samplerConfigOffset);
    uint samplerConfig[shaderHeader.samplerCount] <format=binary>;

 
 
  
} header <bgcolor=cYellow>;

typedef struct {
    char magic[4]; //TEC 
    uint flags;
    uint size; //size of chunk
    uint padd;
    
    uint unkOffset1;
    uint unkCount1;
    
    uint shaderProgramOffset;
    uint shaderProgramCount;
    
    uint unkShaderOffset; //to empty 8 bytes
    uint unkShaderCount;
    
    uint indicesOffset;
    uint indicesCount;
    
    uint shaderOffset;
    uint shaderCount;
    
    uint shaderDefineOffset;
    uint shaderDefineCount;
    
    uint sectionSize;
    uint shaderSize;
    
    uint stringTableOffset;
    uint stringTableSize;
    
    uint shaderDefineInfoOffset;
    uint uniformBufferOffset;
    
    uint samplerCount;
    uint samplerNameOffset;
    uint samplerConfigOffset;
    uint unk;
    
    uint padding;
    uint padding;
    
} ShaderHeader;

typedef struct {
    ubyte index; 
    ubyte flag;
    NameOffset16 name; 
} Uniform <bgcolor=cGreen, read=Str(this.name.name)>;

typedef struct {
    uint index; //index to shader data index list
    uint count; //count to shader data index list
} ShaderProgram <bgcolor=cGreen>;

typedef struct {
   ubyte unks[64];
} UnknownSection1 <bgcolor=cGreen>;

typedef struct {
    ushort shaderDefineInfoIndex;  //index to shader info section
    ushort uniformStringStartIndex; //index start of the uniform string list

    local uint origin = FTell();
    
    //shader define info (56 byte struct)
    FSeek(pos + shaderHeader.shaderDefineInfoOffset + shaderDefineInfoIndex * 56);
    ShaderDefineInfo shaderDefineInfo;
    FSeek(origin);
} ShaderDefine <bgcolor=cGreen>;

typedef struct {
    byte unk;
    byte unk;
    byte unks1[6];
    byte unk2;
    byte unks2[7];
    byte unk3;
    byte unks3[7 + 24];
   
   byte numBlocks;
   byte numUniforms;
   byte numSamplers;
   byte unk;
   
   byte unks4[4];
   
    //load shader info symbols
    FSeek(pos + shaderHeader.uniformBufferOffset + uniformStringStartIndex * 4);
    Uniform blocks[shaderDefineInfo.numBlocks & 0xf]<optimize=false>;
    Uniform uniforms[shaderDefineInfo.numUniforms]<optimize=false>;
    Uniform samplers[shaderDefineInfo.numSamplers]<optimize=false>;
   
} ShaderDefineInfo <bgcolor=cGreen>;

typedef struct {
    uint shaderOffset;
    uint shaderSize;
    uint shaderDefineIndex;
    byte unk; //0 or 1
    byte unk; //2
    ushort unk; //0
    
    local uint origin = FTell();
    
    FSeek(pos + shaderHeader.sectionSize + shaderOffset);
    byte shader[shaderSize];
    
    if (shaderSize > 0)
    {
        FSeek(pos + shaderHeader.shaderDefineOffset + shaderDefineIndex * 4);
        ShaderDefine shaderDefs;
    }
    FSeek(origin);
} ShaderData <bgcolor=cGreen>;

typedef struct {
    ushort nameOffset;
    
    local uint origin = FTell();
    
    FSeek(pos + shaderHeader.stringTableOffset + nameOffset);
    string name;
    
    FSeek(origin);
} NameOffset16<read=Str(this.name)>;

typedef struct {
    uint nameOffset;
    
    local uint origin = FTell();
    
    FSeek(pos + stringTableOffset + nameOffset);
    string name;
    
    FSeek(origin);
} NameOffset<read=Str(this.name)>;